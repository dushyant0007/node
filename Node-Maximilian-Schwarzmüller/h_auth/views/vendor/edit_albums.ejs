<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wedding Album Creator</title>
    <style>
        :root {
            --primary-color: #ff9a8b;
            --secondary-color: #ff6a88;
            --tertiary-color: #ff99ac;
            --text-color: #333;
            --background-color: #fff5f5;
        }

        body {
            font-family: 'Roboto', sans-serif;
            max-width: 75rem;
            margin: 0 auto;
            padding: 1.25rem;
            background-color: var(--background-color);
            color: var(--text-color);
        }

        h1 {
            text-align: center;
            color: var(--secondary-color);
            font-size: 2.5rem;
            margin-bottom: 2rem;
        }

        #albumCreator {
            background-color: white;
            padding: 1.25rem;
            border-radius: 0.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
            margin-bottom: 1.25rem;
        }

        #albumCreator input[type="text"] {
            width: 70%;
            padding: 0.625rem;
            margin-right: 0.625rem;
            border: 0.0625rem solid var(--tertiary-color);
            border-radius: 0.25rem;
            font-size: 1rem;
        }

        #albumCreator button {
            padding: 0.625rem 1.25rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 0.25rem;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s;
        }

        #albumCreator button:hover {
            background-color: var(--secondary-color);
        }

        #albums {
            display: flex;
            flex-wrap: wrap;
            gap: 1.25rem;
        }

        .album {
            background-color: white;
            border-radius: 0.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: calc(50% - 0.625rem);
        }

        .album h2 {
            background-color: var(--secondary-color);
            color: white;
            margin: 0;
            padding: 0.9375rem;
            font-size: 1.5rem;
        }

        .album-section {
            padding: 1.25rem;
        }

        .album-section h3 {
            margin-top: 0;
            color: var(--text-color);
            font-size: 1.25rem;
        }

        .upload-section {
            background-color: #fff9f9;
            border-bottom: 0.0625rem solid var(--tertiary-color);
        }

        .existing-section {
            background-color: #fffafa;
        }

        .preview,
        .existing-images {
            display: flex;
            flex-wrap: wrap;
            gap: 0.625rem;
            margin-top: 0.625rem;
        }

        .file-container {
            position: relative;
            width: 6.25rem;
            height: 6.25rem;
            overflow: hidden;
            border-radius: 0.25rem;
            box-shadow: 0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.2);
        }

        .file-container img,
        .file-container video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .delete-button {
            position: absolute;
            top: 0.3125rem;
            right: 0.3125rem;
            background-color: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 1.25rem;
            height: 1.25rem;
            font-size: 0.75rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s;
        }

        .delete-button:hover {
            background-color: rgba(255, 0, 0, 0.9);
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
        }

        .file-input-wrapper input[type=file] {
            font-size: 100px;
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
        }

        .file-input-wrapper .btn-file-input {
            background-color: var(--primary-color);
            color: white;
            padding: 0.625rem 1.25rem;
            border-radius: 0.25rem;
            cursor: pointer;
            display: inline-block;
            font-size: 1rem;
            transition: background-color 0.3s;
        }

        .file-input-wrapper .btn-file-input:hover {
            background-color: var(--secondary-color);
        }

        button {
            padding: 0.5rem 1rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 0.25rem;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: var(--secondary-color);
        }
    </style>
</head>

<body>
    <h1>Our Wedding Albums</h1>
    <div id="albumCreator">
        <input type="text" id="albumName" placeholder="Enter album name">
        <input type="hidden" id="serviceId" value="<%= pageData.serviceId %>" name="serviceId">
        <button onclick="createAlbum()">Create Album</button>
    </div>
    <div id="albums"></div>

    <script>
        let albums = [];

        function createAlbum() {
            const albumName = document.getElementById('albumName').value;
            const serviceId = document.getElementById('serviceId').value;

            if (albumName) {
                const existingAlbum = albums.find(album => album.name === albumName);
                if (existingAlbum) {
                    alert('Album already exists!');
                    return;
                }
                const album = { name: albumName, files: [], existingFiles: [], serviceId };
                albums.push(album);
                renderAlbums();
                document.getElementById('albumName').value = '';
            }
        }

        function renderAlbums() {
            const albumsContainer = document.getElementById('albums');
            albumsContainer.innerHTML = '';
            albums.forEach((album, index) => {
                const albumElement = document.createElement('div');
                albumElement.className = 'album';
                albumElement.innerHTML = `
                    <h2>${album.name}</h2>
                    <div class="album-section upload-section">
                        <h3>Add New Memories</h3>
                        <div class="file-input-wrapper">
                            <button class="btn-file-input">Choose Files</button>
                            <input type="file" id="fileInput${index}" multiple accept="image/*,video/*" onchange="uploadFiles(${index}, this.files)">
                        </div>
                        <div class="preview"></div>
                        <button onclick="uploadAlbum(${index})">Upload New Files</button>
                    </div>
                    <div class="album-section existing-section">
                        <h3>Cherished Moments</h3>
                        <div class="existing-images"></div>
                    </div>
                `;
                albumsContainer.appendChild(albumElement);
                renderPreview(index);
                renderExistingImages(index);
            });
        }

        function uploadFiles(albumIndex, files) {
            const album = albums[albumIndex];
            album.files = [...album.files, ...Array.from(files)];
            renderPreview(albumIndex);
            document.getElementById(`fileInput${albumIndex}`).value = '';
        }

        function renderPreview(albumIndex) {
            const album = albums[albumIndex];
            const previewElement = document.querySelectorAll('.preview')[albumIndex];
            previewElement.innerHTML = '';
            album.files.forEach((file, fileIndex) => {
                const fileContainer = document.createElement('div');
                fileContainer.className = 'file-container';

                const fileElement = document.createElement(file.type.startsWith('image/') ? 'img' : 'video');
                fileElement.src = URL.createObjectURL(file);
                if (fileElement.tagName === 'VIDEO') {
                    fileElement.setAttribute('controls', '');
                }

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'X';
                deleteButton.className = 'delete-button';
                deleteButton.onclick = (e) => {
                    e.stopPropagation();
                    deleteFile(albumIndex, fileIndex);
                };

                fileContainer.appendChild(fileElement);
                fileContainer.appendChild(deleteButton);
                previewElement.appendChild(fileContainer);
            });
        }

        function renderExistingImages(albumIndex) {
            const album = albums[albumIndex];
            const existingImagesElement = document.querySelectorAll('.existing-images')[albumIndex];
            existingImagesElement.innerHTML = '';
            album.existingFiles.forEach((file, fileIndex) => {
                const fileContainer = document.createElement('div');
                fileContainer.className = 'file-container';

                const fileElement = document.createElement(file.type.startsWith('video') ? 'video' : 'img');
                fileElement.src = file.path;
                if (fileElement.tagName === 'VIDEO') {
                    fileElement.setAttribute('controls', '');
                }

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'X';
                deleteButton.className = 'delete-button';
                deleteButton.onclick = (e) => {
                    e.stopPropagation();
                    deleteExistingFile(albumIndex, fileIndex);
                };

                fileContainer.appendChild(fileElement);
                fileContainer.appendChild(deleteButton);
                existingImagesElement.appendChild(fileContainer);
            });
        }

        function deleteFile(albumIndex, fileIndex) {
            albums[albumIndex].files.splice(fileIndex, 1);
            renderPreview(albumIndex);
        }

        function deleteExistingFile(albumIndex, fileIndex) {
            const album = albums[albumIndex];
            const file = album.existingFiles[fileIndex];

            console.log(album.name, album.serviceId,file.name) 

            fetch('/vendor/dashboard/update-album/<%= pageData.serviceId %>', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    albumName: album.name,
                    fileName: file.name,
                })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('File deleted successfully:', data);
                    album.existingFiles.splice(fileIndex, 1);
                    renderExistingImages(albumIndex);
                })
                .catch(error => {
                    console.error('Error deleting file:', error);
                    alert('Error deleting file. Please try again.');
                });
        }

        function uploadAlbum(albumIndex) {
            const album = albums[albumIndex];
            const formData = new FormData();

            formData.append('albumName', album.name);
            formData.append('serviceId', album.serviceId);

            album.files.forEach((file, index) => {
                formData.append('files', file);
            });

            fetch('/vendor/dashboard/update-album', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Album uploaded successfully:', data);
                    alert('Album uploaded successfully!');
                    album.files = [];
                    refreshAlbum(albumIndex);
                })
                .catch(error => {
                    console.error('Error uploading album:', error);
                    alert('Error uploading album. Please try again.');
                });
        }

        async function refreshAlbum(albumIndex) {
            const album = albums[albumIndex];
            try {
                const response = await fetch(`/vendor/dashboard/get-albums/${album.serviceId}`);
                const allAlbums = await response.json();

                if (allAlbums[album.name]) {
                    album.existingFiles = allAlbums[album.name].map(file => ({
                        name: file,
                        type: file.endsWith('.mp4') ? 'video/mp4' : 'image/jpeg',
                        path: `/service_albums/<%= pageData.userId %>/${album.serviceId}/${album.name}/${file}`
                    }));
                } else {
                    album.existingFiles = [];
                }

                renderAlbums();
            } catch (error) {
                console.error('Error refreshing album:', error);
            }
        }

        async function loadExistingAlbums() {
            try {
                const response = await fetch(`/vendor/dashboard/get-albums/<%= pageData.serviceId %>`);
                const response_albums = await response.json();
                console.log(response_albums);

                albums = Object.entries(response_albums).map(([name, files]) => ({
                    name,
                    files: [],
                    existingFiles: files.map(file => ({
                        name: file,
                        type: file.endsWith('.mp4') ? 'video/mp4' : 'image/jpeg',
                        path: `/service_albums/<%= pageData.userId %>/<%= pageData.serviceId %>/${name}/${file}`
                    })),
                    serviceId: '<%= pageData.serviceId %>'
                }));

                renderAlbums();
            } catch (error) {
                console.error('Error loading existing albums:', error);
            }
        }

        loadExistingAlbums();
    </script>
</body>

</html>